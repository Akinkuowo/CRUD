{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ASA\\\\Desktop\\\\work\\\\package\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASA\\\\desktop\\\\work\\\\package\\\\front-end\\\\src\\\\util\\\\auth.js\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nif (!firebase.apps.length) {\n  // Replace with your own Firebase credentials\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBkkFF0XhNZeWuDmOfEhsgdfX1VBG7WTas\",\n    authDomain: \"divjoy-demo.firebaseapp.com\",\n    projectId: \"divjoy-demo\",\n    appID: \"divjoy-demo\"\n  });\n}\n\nconst authContext = createContext(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return React.createElement(authContext.Provider, {\n    value: auth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, children);\n} // Hook for child components to get the auth object ...\n// ... update when it changes.\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  const signin = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signup = (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase.auth().sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n    return firebase.auth().confirmPasswordReset(resetCode, password).then(() => {\n      return true;\n    });\n  }; // Subscribe to user on mount\n\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Subscription unsubscribe function\n\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}\n\nconst getFromQueryString = key => {\n  return queryString.parse(window.location.search)[key];\n};","map":{"version":3,"sources":["C:\\Users\\ASA\\desktop\\work\\package\\front-end\\src\\util\\auth.js"],"names":["React","useState","useEffect","useContext","createContext","queryString","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","appID","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","signin","email","password","signInWithEmailAndPassword","then","response","signup","createUserWithEmailAndPassword","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","resetCode","getFromQueryString","unsubscribe","onAuthStateChanged","key","parse","window","location","search"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nif (!firebase.apps.length) {\n  // Replace with your own Firebase credentials\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBkkFF0XhNZeWuDmOfEhsgdfX1VBG7WTas\",\n    authDomain: \"divjoy-demo.firebaseapp.com\",\n    projectId: \"divjoy-demo\",\n    appID: \"divjoy-demo\"\n  });\n}\n\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... update when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  const signin = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(response => {\n        setUser(response.user);\n        return response.user;\n      });\n  };\n\n  const signup = (email, password) => {\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(response => {\n        setUser(response.user);\n        return response.user;\n      });\n  };\n\n  const signout = () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        setUser(false);\n      });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        return true;\n      });\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"oobCode\");\n\n    return firebase\n      .auth()\n      .confirmPasswordReset(resetCode, password)\n      .then(() => {\n        return true;\n      });\n  };\n\n  // Subscribe to user on mount\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    });\n\n    // Subscription unsubscribe function\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}\n\nconst getFromQueryString = key => {\n  return queryString.parse(window.location.search)[key];\n};\n"]},"metadata":{},"sourceType":"module"}