{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ASA\\\\Desktop\\\\work\\\\package\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASA\\\\desktop\\\\work\\\\package\\\\front-end\\\\src\\\\components\\\\Auth.js\";\nimport React, { useState } from \"react\";\nimport FormStatus from \"./FormStatus\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { Link } from \"./../util/router.js\";\nimport \"./Auth.scss\";\n\nfunction Auth(props) {\n  // State for all inputs\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        email = _useState2[0],\n        setEmail = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        pass = _useState4[0],\n        setPass = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        confirmPass = _useState6[0],\n        setConfirmPass = _useState6[1]; // Whether to show errors\n  // We set to true if they submit and there are errors.\n  // We only show errors after they submit because\n  // it's annoying to see errors while typing.\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        showErrors = _useState8[0],\n        setShowErrors = _useState8[1]; // Error array we'll populate\n\n\n  let errors = []; // Function for fetching error for a field\n\n  const getError = field => {\n    return errors.find(e => e.field === field);\n  }; // Function to see if field is empty\n\n\n  const isEmpty = val => val.trim() === \"\"; // Add error if email empty\n\n\n  if ([\"signin\", \"signup\", \"forgotpass\"].includes(props.mode)) {\n    if (isEmpty(email)) {\n      errors.push({\n        field: \"email\",\n        message: \"Please enter an email\"\n      });\n    }\n  } // Add error if password empty\n\n\n  if ([\"signin\", \"signup\", \"changepass\"].includes(props.mode)) {\n    if (isEmpty(pass)) {\n      errors.push({\n        field: \"pass\",\n        message: \"Please enter a password\"\n      });\n    }\n  } // Add error if confirmPass empty or\n  // if it doesn't match pass.\n  // Only for signup and changepass views.\n\n\n  if ([\"signup\", \"changepass\"].includes(props.mode)) {\n    if (isEmpty(confirmPass)) {\n      errors.push({\n        field: \"confirmPass\",\n        message: \"Please confirm password\"\n      });\n    } else if (pass !== confirmPass) {\n      errors.push({\n        field: \"confirmPass\",\n        message: \"This doesn't match your password\"\n      });\n    }\n  } // Handle form submission\n\n\n  const handleSubmit = () => {\n    // If field errors then show them\n    if (errors.length) {\n      setShowErrors(true);\n    } else {\n      // Otherwise call onSubmit with email/pass\n      if (props.onSubmit) {\n        props.onSubmit({\n          email,\n          pass\n        });\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, props.status && props.status.message && React.createElement(FormStatus, {\n    type: props.status.type,\n    message: props.status.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, [\"signup\", \"signin\", \"forgotpass\"].includes(props.mode) && React.createElement(FormField, {\n    value: email,\n    type: \"email\",\n    placeholder: \"Email\",\n    error: showErrors && getError(\"email\"),\n    onChange: value => setEmail(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), [\"signup\", \"signin\", \"changepass\"].includes(props.mode) && React.createElement(FormField, {\n    value: pass,\n    type: \"password\",\n    placeholder: \"Password\",\n    error: showErrors && getError(\"pass\"),\n    onChange: value => setPass(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), [\"signup\", \"changepass\"].includes(props.mode) && React.createElement(FormField, {\n    value: confirmPass,\n    type: \"password\",\n    placeholder: \"Confirm Password\",\n    error: showErrors && getError(\"confirmPass\"),\n    onChange: value => setConfirmPass(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"control \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    fullWidth: true,\n    state: props.status && props.status.type === \"pending\" ? \"loading\" : \"normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, props.buttonText))), [\"signup\", \"signin\"].includes(props.mode) && React.createElement(\"div\", {\n    className: \"Auth__bottom-link has-text-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, props.mode === \"signup\" && React.createElement(React.Fragment, null, \"Have an account already?\", React.createElement(Link, {\n    to: \"/signin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Sign in\")), props.mode === \"signin\" && React.createElement(React.Fragment, null, React.createElement(Link, {\n    to: \"/signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Create an account\"), React.createElement(Link, {\n    to: \"/forgotpass\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Forgot password\")))));\n}\n\nexport default Auth;","map":{"version":3,"sources":["C:\\Users\\ASA\\desktop\\work\\package\\front-end\\src\\components\\Auth.js"],"names":["React","useState","FormStatus","FormField","SectionButton","Link","Auth","props","email","setEmail","pass","setPass","confirmPass","setConfirmPass","showErrors","setShowErrors","errors","getError","field","find","e","isEmpty","val","trim","includes","mode","push","message","handleSubmit","length","onSubmit","status","type","preventDefault","value","parentColor","buttonText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport FormStatus from \"./FormStatus\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { Link } from \"./../util/router.js\";\nimport \"./Auth.scss\";\n\nfunction Auth(props) {\n  // State for all inputs\n  const [email, setEmail] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  const [confirmPass, setConfirmPass] = useState(\"\");\n\n  // Whether to show errors\n  // We set to true if they submit and there are errors.\n  // We only show errors after they submit because\n  // it's annoying to see errors while typing.\n  const [showErrors, setShowErrors] = useState(false);\n\n  // Error array we'll populate\n  let errors = [];\n\n  // Function for fetching error for a field\n  const getError = field => {\n    return errors.find(e => e.field === field);\n  };\n\n  // Function to see if field is empty\n  const isEmpty = val => val.trim() === \"\";\n\n  // Add error if email empty\n  if ([\"signin\", \"signup\", \"forgotpass\"].includes(props.mode)) {\n    if (isEmpty(email)) {\n      errors.push({\n        field: \"email\",\n        message: \"Please enter an email\"\n      });\n    }\n  }\n\n  // Add error if password empty\n  if ([\"signin\", \"signup\", \"changepass\"].includes(props.mode)) {\n    if (isEmpty(pass)) {\n      errors.push({\n        field: \"pass\",\n        message: \"Please enter a password\"\n      });\n    }\n  }\n\n  // Add error if confirmPass empty or\n  // if it doesn't match pass.\n  // Only for signup and changepass views.\n  if ([\"signup\", \"changepass\"].includes(props.mode)) {\n    if (isEmpty(confirmPass)) {\n      errors.push({\n        field: \"confirmPass\",\n        message: \"Please confirm password\"\n      });\n    } else if (pass !== confirmPass) {\n      errors.push({\n        field: \"confirmPass\",\n        message: `This doesn't match your password`\n      });\n    }\n  }\n\n  // Handle form submission\n  const handleSubmit = () => {\n    // If field errors then show them\n    if (errors.length) {\n      setShowErrors(true);\n    } else {\n      // Otherwise call onSubmit with email/pass\n      if (props.onSubmit) {\n        props.onSubmit({\n          email,\n          pass\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"Auth\">\n      {props.status && props.status.message && (\n        <FormStatus type={props.status.type} message={props.status.message} />\n      )}\n\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          handleSubmit();\n        }}\n      >\n        {[\"signup\", \"signin\", \"forgotpass\"].includes(props.mode) && (\n          <FormField\n            value={email}\n            type=\"email\"\n            placeholder=\"Email\"\n            error={showErrors && getError(\"email\")}\n            onChange={value => setEmail(value)}\n          />\n        )}\n\n        {[\"signup\", \"signin\", \"changepass\"].includes(props.mode) && (\n          <FormField\n            value={pass}\n            type=\"password\"\n            placeholder=\"Password\"\n            error={showErrors && getError(\"pass\")}\n            onChange={value => setPass(value)}\n          />\n        )}\n\n        {[\"signup\", \"changepass\"].includes(props.mode) && (\n          <FormField\n            value={confirmPass}\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            error={showErrors && getError(\"confirmPass\")}\n            onChange={value => setConfirmPass(value)}\n          />\n        )}\n\n        <div className=\"field\">\n          <p className=\"control \">\n            <SectionButton\n              parentColor={props.parentColor}\n              size=\"medium\"\n              fullWidth={true}\n              state={\n                props.status && props.status.type === \"pending\"\n                  ? \"loading\"\n                  : \"normal\"\n              }\n            >\n              {props.buttonText}\n            </SectionButton>\n          </p>\n        </div>\n\n        {[\"signup\", \"signin\"].includes(props.mode) && (\n          <div className=\"Auth__bottom-link has-text-centered\">\n            {props.mode === \"signup\" && (\n              <>\n                Have an account already?\n                <Link to=\"/signin\">Sign in</Link>\n              </>\n            )}\n\n            {props.mode === \"signin\" && (\n              <>\n                <Link to=\"/signup\">Create an account</Link>\n                <Link to=\"/forgotpass\">Forgot password</Link>\n              </>\n            )}\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}